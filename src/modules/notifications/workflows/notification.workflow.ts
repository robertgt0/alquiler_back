// src/modules/notifications/workflows/notification.workflow.ts
import { NotificationData } from '../types/notification.types';
import { sendEmailNotification } from '../services/notification.service';
import { saveNotification } from '../models/notification.model';

export async function processNotification(notification: NotificationData) {
  try {
    console.log('üü¢ [Workflow] Iniciando procesamiento de notificaci√≥n');

    // Validaciones b√°sicas
    if (!notification.subject || !notification.message) {
      throw new Error('Faltan subject o message');
    }

    const channel = notification.channel ?? 'email';

    // Guardado previo (ejemplo: persistencia m√≠nima)
    await saveNotification({ ...notification, channel });

    // Enrutamiento por canal
    switch (channel) {
      case 'email':
        if (!notification.to) throw new Error('Campo "to" requerido para email');
        await sendEmailNotification(notification);
        break;

      case 'console':
        console.log('üì£ [Console Channel] ->', notification.message);
        break;

      case 'webhook':
        // Aqu√≠ podr√≠as llamar a otro webhook (por ejemplo n8n)
        console.log('üîó [Webhook Channel] ->', notification.meta?.webhookUrl ?? 'sin webhookUrl');
        break;

      default:
        throw new Error(`Canal desconocido: ${channel}`);
    }

    console.log('‚úÖ [Workflow] Notificaci√≥n procesada con √©xito');
    return { success: true, message: 'Notificaci√≥n procesada correctamente' };
  } catch (error: any) {
    console.error('‚ùå [Workflow] Error:', error.message ?? error);
    return { success: false, message: error.message ?? 'Error desconocido' };
  }
}

